{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/NotificationMessage/NotificationMessage .js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","buttonsSet","map","e","style","marginRight","onClick","toLowerCase","Stats","good","neutral","bad","total","positiveFeedback","listStyle","padding","Section","title","children","marginLeft","NotificationMessage","message","App","state","addFeedback","btn","setState","current","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","feedBakBtnOptions","Object","keys","this","totalFeedbackCount","positiveFeedbackPercentage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAuBeA,MArBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC5BC,EAAaF,EAAQG,KAAI,SAACC,GAAD,OAC7B,wBACEC,MAAO,CAAEC,YAAa,QACtBC,QAAS,WACPN,EAAgBG,EAAEI,gBAHtB,SAOGJ,GAFIA,MAMT,OAAO,8BAAMF,KCYAO,MAzBf,YAAiE,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,iBAC1C,OACE,qBACET,MAAO,CACLU,UAAW,OACXC,QAAS,KAHb,UAME,wCAAWN,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,+DAA2BC,EAA3B,YCESG,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,0BAASd,MAAO,CAAEe,WAAY,QAA9B,UACE,6BAAKF,IACJC,MCIQE,MARf,YAA2C,IAAZC,EAAW,EAAXA,QAC7B,OAAO,4BAAIA,KCIPC,E,4MACJC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPa,YAAc,SAACC,GACb,EAAKC,UAAS,SAACC,GAAD,sBAAiBF,EAAME,EAAQF,GAAO,O,EAGtDG,mBAAqB,kBACnB,EAAKL,MAAMd,KAAO,EAAKc,MAAMb,QAAU,EAAKa,MAAMZ,K,EAEpDkB,gCAAkC,kBAChCC,KAAKC,MAAO,IAAM,EAAKR,MAAMd,KAAQ,EAAKmB,uB,4CAE5C,WACE,IAEMI,EAAoBC,OAAOC,KAAKC,KAAKZ,OAE3C,EAA+BY,KAAKZ,MAA5Bd,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjByB,EAAqBD,KAAKP,qBAC1BS,EAA6BF,KAAKN,kCAExC,OACE,qCACE,cAAC,EAAD,CAASZ,MAVS,wBAUlB,SACE,cAAC,EAAD,CACElB,QAASiC,EACThC,gBAAiBmC,KAAKX,gBAG1B,cAAC,EAAD,CAASP,MAfW,aAepB,SACGmB,EACC,cAAC,EAAD,CACE3B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOwB,EACPvB,iBAAkBwB,IAGpB,cAAC,EAAD,CAAqBhB,QAvBF,kC,GArBbiB,aAoDHhB,IC/CAiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b93ca957.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  const buttonsSet = options.map((e) => (\r\n    <button\r\n      style={{ marginRight: \"15px\" }}\r\n      onClick={() => {\r\n        onLeaveFeedback(e.toLowerCase());\r\n      }}\r\n      key={e}\r\n    >\r\n      {e}\r\n    </button>\r\n  ));\r\n\r\n  return <div>{buttonsSet}</div>;\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Stats({ good, neutral, bad, total, positiveFeedback }) {\r\n  return (\r\n    <ul\r\n      style={{\r\n        listStyle: \"none\",\r\n        padding: \"0\",\r\n      }}\r\n    >\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive Feedback: {`${positiveFeedback}%`}</li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStats.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positiveFeedback: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Stats;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section style={{ marginLeft: \"30px\" }}>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction NotificationMessage({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotificationMessage.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default NotificationMessage;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Stats from \"./components/Statistics\";\nimport Section from \"./components/Section\";\nimport NotificationMessage from \"./components/NotificationMessage\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = (btn) => {\n    this.setState((current) => ({ [btn]: current[btn] + 1 }));\n  };\n\n  countTotalFeedback = () =>\n    this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = () =>\n    Math.round((100 * this.state.good) / this.countTotalFeedback());\n\n  render() {\n    const feedbackTitle = \"Please leave feedback\";\n    const statisticsTitle = \"Statistics\";\n    const feedBakBtnOptions = Object.keys(this.state);\n    const onEmptyFeedbackMsg = \"There is no feedback\";\n    const { good, neutral, bad } = this.state;\n    const totalFeedbackCount = this.countTotalFeedback();\n    const positiveFeedbackPercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title={feedbackTitle}>\n          <FeedbackOptions\n            options={feedBakBtnOptions}\n            onLeaveFeedback={this.addFeedback}\n          />\n        </Section>\n        <Section title={statisticsTitle}>\n          {totalFeedbackCount ? (\n            <Stats\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalFeedbackCount}\n              positiveFeedback={positiveFeedbackPercentage}\n            />\n          ) : (\n            <NotificationMessage message={onEmptyFeedbackMsg} />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}